#!/system/bin/sh
#Jancox Menu by wahyu6070
#15/07/2020 - 26/03/2021


GREEN='\e[01;32m'
RED='\e[01;31m'
YELLOW='\e[01;33m'
BLUE='\e[01;34m'
VIOLET='\e[01;35m'
BLACK='\e[01;30m'
CYAN='\e[01;36m'
WHITE='\e[01;37m'
BGBL='\e[1;30;47m'



print (){ echo "$1"; }
del (){ rm -rf "$@"; }
cdir (){ mkdir -p " $@"; }
getp(){ grep "^$1" "$2" | head -n1 | cut -d = -f 2; }
abort (){
	print " "
	print "${RED}!!! $1${GREEN}";
	sleep 4s;
	print " "
	exit 1
	}
error (){
	print " "
	print "${RED}!!! $1${GREEN}";
	print " "
	}
printmid() {
  local CHAR=$(printf "$@" | sed 's|\\e[[0-9;]*m||g' | wc -m)
  local hfCOLUMN=$((COLUMNS/2))
  local hfCHAR=$((CHAR/2))
  local indent=$((hfCOLUMN-hfCHAR))
  echo "$(printf '%*s' "${indent}" '') $@"
}


jancox=/data/local/jancox-tool
editor=$jancox/editor
jancoxversion=2.3
jancoxdate=26-03-2021
cd $jancox



if [ ! -f "$jancox/unpack.sh" ]; then
abort "Jancox Tool Not Installed"
elif [ -f "$jancox/unpack.sh" ] && [ ! -d $editor ]; then
abort "Please unpack for using this tool"
fi

if [ -f $editor/system/system/build.prop ]; then
system=$editor/system/system
sysroot=true
else
sysroot=false
system=$editor/system
fi
vendor=$editor/vendor

listdebloatdir="
Babe
Duo
DMClient
Drive
DriveActivator
Duo
Facebook
facebook-appmanager
FacebookMessenger
Gmail2
GooglePay
Instagram
Lazada
mangaDeals
Maps
Music2
MyASUS
Photos
Shopee
Videos
YouTube
YandexApp
YandexBrowser
Velvet
facebook-installer
FacebookAppManager
LauncherRes
FacebookInstaller
"





#functions menu


menu(){
	while true; do
	clear
	printmid "${YELLOW} $2 ${GREEN}"
	print
	$1
	print
	print "1.Back To Menu      2.Refresh"
	print
	echo -n "Select menu : "
	read anjay
	if [ $anjay -eq 1 ]; then
	break
	elif [ $anjay -eq 2 ]; then print;
	else
	print
	error "Please select 1 or 2"
	print
	sleep 2s
	fi
	done
}

debloating_auto (){
	#debloating auto folder
	for i1 in $(find $system -type d); do
	  case $i1 in
	   *priv-app | *app | *etc)
	      for i2 in $listdebloatdir ; do
	         if [ -d $i1/$i2 ]; then
	         print "- Debloating directory •> $i1/$i2"
	         del $i1/$i2
	         elif [ -f $i1/$i2 ]; then
	         print "- Debloating file •> $i1/$i2"
	         del $i1/$i2
	         fi
	      done
	   ;;
	   
   	esac
	done
  print "- Done"
}
#
debloating () {
while true ; do
clear
printmid "Debloating Menu"
print " "
print "1.Debloat auto"
print "2.Exit"
print " "
echo -n "Select Menu : "
read deb
case $deb in
1)
menu debloating_auto Debloating auto
;;
2)
break
;;
*)
error " $deb Menu Not found"
sleep 3s
;;
esac
done
}
disable_dm_verity(){
	if [[ "$(grep secure=0 $editor/vendor/default.prop)" ]]; then
	print "- set secure=0 to secure=1 •> $editor/vendor/default.prop"
	sed -i 's/'"secure=0"'/'"secure=1"'/g' $editor/vendor/default.prop
	fi
	if [[ "$(grep forceencrypt $editor/vendor/etc/fstab.qcom)" ]]; then
	print "- set forceencrypt to encryptable •> $editor/vendor/etc/fstab.qcom"
	sed -i 's/'"forceencrypt"'/'"encryptable"'/g' $editor/vendor/etc/fstab.qcom
	fi
	if [[ "$(grep forcefdeorfbe $editor/vendor/etc/fstab.qcom)" ]]; then
	print "- set forcefdeorfbe to encryptable •> $editor/vendor/etc/fstab.qcom"
	sed -i 's/'"forcefdeorfbe"'/'"encryptable"'/g' $editor/vendor/etc/fstab.qcom
	fi
	if [[ "$(grep fileencryption $editor/vendor/etc/fstab.qcom)" ]]; then
	print "- set fileencryption to encryptable •> $editor/vendor/etc/fstab.qcom"
	sed -i 's/'"fileencryption"'/'"encryptable"'/g' $editor/vendor/etc/fstab.qcom
	fi
	if [[ "$(grep .dmverity=true $editor/vendor/etc/fstab.qcom)" ]]; then
	print "- set .dmverity=true to .dmverity=false •> $editor/vendor/etc/fstab.qcom"
	sed -i 's/'".dmverity=true"'/'".dmverity=false"'/g' $editor/vendor/etc/fstab.qcom
	fi
	if [[ "$(grep fileencryption $editor/vendor/etc/fstab.qcom)" ]]; then
	print "- set fileencryption to encryptable •> $editor/vendor/etc/fstab.qcom"
	sed -i 's/'"fileencryption"'/'"encryptable"'/g' $editor/vendor/etc/fstab.qcom
	fi
	if [ -f $system/recovery-from-boot.p ]; then
	print "- Removing •> $editor/$system/recovery-from-boot.p"
	rm -rf $system/recovery-from-boot.p
	fi
	print " "
	print "- Done"
	}

change_name_rom(){
	NAME_ROM=`getp ro.build.display.id $editor2/$system/build.prop`
	clear
	printmid "${YELLOW}Change Name Rom${GREEN}"
	print " "
	print "Name ROM = ${YELLOW}$NAME_ROM${GREEN}"
	print
	echo -n "New name ROM : ${VIOLET}"
	read NEW_NAME_ROM
	sed -i 's/'"ro.build.display.id=${NAME_ROM}"'/'"ro.build.display.id=${NEW_NAME_ROM}"'/g' $system/build.prop
	print "${GREEN}•> Change name ${WHITE} : ${YELLOW}$NAME_ROM ${WHITE}to ${GREEN}$NEW_NAME_ROM"
	print "Done"
	print
	print "${YELLOW}1.Back Menu${VIOLET}"
	print
	echo -n " Select Menu : ${YELLOW}"
	read asw
	}
about (){
#
print "$CYAN "
print "Jancox Tool Menu v$jancoxversion ($jancoxdate)"
print "Copyright (C) 2021 wahyu kurniawan (wahyu6070)."
print "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>."
print "This is free software: you are free to change and redistribute it."
print "There is NO WARRANTY, to the extent permitted by law."
print "${YELLOW}"
print " Github  : https://github.com/wahyu6070 "
print " Youtube : https://www.youtube.com/c/wahyu6070 "
print " Xda     : @wahyu6070 "
print " Telegram: https://t.me/wahyu6070group"
print " $GREEN"
}


#
# Core menu
#

DMVERITY=false
if [ -f $editor/vendor/build.prop ]; then
	for GREP_VERITY in forceencrypt forcefdeorfbe fileencryption .dmverity=true fileencryption; do
		[[ "$(grep $GREP_VERITY $editor/vendor/etc/fstab.qcom)" ]] && DMVERITY=true
	done
	[[ "$(grep secure=0 $editor2/vendor/default.prop)" ]] && DMVERITY=true;
	#[ -f $editor2/$system/recovery-from-boot.p ] && DMVERITY=true;
else
DMVERITY=false
fi


while true ; do
clear
printmid "${CYAN}Jancox ${VIOLET}Tool ${WHITE}Menu"
print "$GREEN "
print " "
print "- Android Version = $(getp ro.build.version.release $system/build.prop) "
print "- Name ROM        = $(getp ro.build.display.id $system/build.prop) "
[ -f $editor2/vendor/build.prop ] && print "- Device          = $(getp ro.product.vendor.device $editor2/vendor/build.prop) "
print "- System as-root  = $sysroot "
print "- Dm-verity       = $DMVERITY"
print " "
print "1.Debloating"
print "2.Disable Dm-verity"
print "3.Change name ROM"
print "4.About"
print "5.Exit"
print
echo -n " Select menu : $VIOLET"
read menus
case $menus in
1)
print " "
debloating
;;
2)
menu disable_dm_verity "Disable Dm-Verity"
;;
3)
change_name_rom
;;
4)
menu about About
;;
5)
print "$WHITE"
break
;;
*)
error "$menus Menu not found"
sleep 3s
;;
esac
done










